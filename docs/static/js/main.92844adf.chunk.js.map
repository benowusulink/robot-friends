{"version":3,"sources":["components/header/header.js","components/card/Card.js","components/cardlist/Cardlist.js","components/searchbox/Searchbox.js","components/scroll/Scroll.js","components/errorBoundries/ErrorBoundries.js","containers/App/App.js","containers/Actions/actions.js","containers/Constants/constants.js","containers/Reducers/reducers.js","index.js"],"names":["Header","nextProps","nextState","className","Component","Card","id","name","email","src","alt","Cardlist","robots","map","user","i","key","Searchbox","searchfield","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundries","state","hasError","error","info","this","setState","App","displayRobots","onSearchChange","filtRobo","filter","toLowerCase","includes","connect","searchRobots","requestRobots","isPending","dispatch","e","payload","target","value","fetch","then","res","json","catch","err","initialState","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92844adf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n{\n  /* tradional react component with a lifecyle hook\n shouldComponentUpdate() which defines if this \ncomponent should be re rendered if forced to \nre render */\n}\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return <h1 className={\"f1\"}>Robofriends</h1>;\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\n{\n  /* tradional stateless react component */\n}\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200\"`} alt=\"photo6\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card/Card.js\";\n\n/* tradional react component which loops then\nrenders the data determined by the loop */\nconst Cardlist = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Cardlist;\n","import React from \"react\";\n\nconst Searchbox = ({ searchfield, onChange }) => {\n  return (\n    <div>\n      <input\n        type={`search`}\n        placeholder={`search robots`}\n        className={`pa3 ba b--green bg-lightest-blue`}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default Searchbox;\n","import React from \"react\";\n\n{\n  /* tradional react component which renders \n a component that is wrapped around this component\nwhich is reffered to props.children (the child of this\ncomponent)*/\n}\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"solid black 1px\",\n        height: \"500px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\n/* error boundary component which details \n any errors a child component passed within \nmay have (this is done with the life cycle hook\ncomponentDidCatch()), also renders a message \ninstead of the component error */\nclass ErrorBoundries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>{`ooops`}</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundries;\n","/* importing react and the component method */\nimport React, { Component } from \"react\";\n/* importing the connect package from react -redux\n */\nimport { connect } from \"react-redux\";\nimport \"./app.css\";\n/* importing components */\nimport Header from \"../../components/header/header.js\";\nimport Cardlist from \"../../components/cardlist/Cardlist.js\";\nimport Searchbox from \"../../components/searchbox/Searchbox.js\";\nimport Scroll from \"../../components/scroll/Scroll.js\";\nimport ErrorBoundries from \"../../components/errorBoundries/ErrorBoundries.js\";\n/*importing actions for redux state management */\nimport { setSetSearchfield, requestRobots } from \"../Actions/actions.js\";\n\n/* function that defines and determines the state \nwithin this file imported from the original state.\nThis will be passed into the connect module from \nreact-redux and will be exported before the app.\n*/\nconst mapStateToProps = (state) => {\n  return {\n    searchfield: state.searchRobots.searchfield,\n    error: state.requestRobots.error,\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (e) => {\n      dispatch(setSetSearchfield(e.target.value));\n    },\n    displayRobots: () => {\n      requestRobots(dispatch);\n    },\n  };\n};\n\n/* react class component */\n\nclass App extends Component {\n  /* react life cycle method that gets activated when the \npage is fully rendered and then re renders the page with\ndata provided within the lifecycle */\n  componentDidMount() {\n    this.props.displayRobots();\n  }\n\n  /* react life cycle method render() which defines \n what gets displayed to the user */\n  render(props) {\n    /* Using obeject destructuring on this.props to make \nit easier to use */\n    const { onSearchChange, searchfield, robots, error } = this.props;\n\n    /* caching after looping through the data which will define \nwhat data will be rendered */\n\n    const filtRobo = robots.filter((robots) => {\n      return robots.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n\n    /* conditional statement which defines what willbe rendered */\n    if (!robots) {\n      return <h1>{`loading`}</h1>;\n    } else {\n      return (\n        <div className={`tc`}>\n          {/* tradional react component */}\n          <Header />\n          {/* tradional react component with props passed*/}\n          <Searchbox searchfield={searchfield} onChange={onSearchChange} />\n          <Scroll>\n            {/* tradional react component that can wrap around \n   other components */}\n            <ErrorBoundries error={error}>\n              <Cardlist robots={filtRobo} />\n            </ErrorBoundries>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\n/* exporting the data from the connect redux functions\nso it can be used within other files within the app.\nAlso exporting the App componentso it can be used within \nother file.\n */\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/* imported variable constants */\n\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"../Constants/constants.js\";\n\n/* An action function that defines the data \n of the searchfield */\nconst setSetSearchfield = (text) => {\n  return { type: CHANGE_SEARCHFIELD, payload: text };\n};\n\n/* An action function which accepts dispatch from the \n app component as a parameter and then makes an API \n request to retrieve json data which will be used as \n the robot cards data */\nconst requestRobots = (dispatch) => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING,\n  });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((res) => {\n      return res.json();\n    })\n    .then((robots) => {\n      return dispatch({\n        type: REQUEST_ROBOTS_SUCCESS,\n        payload: robots,\n      });\n    })\n    .catch((err) => {\n      return dispatch({\n        type: REQUEST_ROBOTS_FAILED,\n        payload: err,\n      });\n    });\n};\n\n/* exporting functions so it can be used within \n other files */\nexport { setSetSearchfield, requestRobots };\n","/* variable constants that will be used within other files */\n\nconst CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\nconst REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nconst REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nconst REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n\nexport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n};\n","/* imported variable constants */\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"../Constants/constants.js\";\n\n/* initial state of the app */\nconst initialState = {\n  searchfield: \"\",\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\n/* redux reducer responsible for changing the state of the \n app with the info provided by the actions\n\n (PLEASE NOTE THERE WOULD USUALLY BE ONE REDUCER IN AN APP,\n THERE ARE TWO HERE FOR DEMOSTRATION PURPOSES TO SHOW UNDERSTANDING \n OF REDUX) */\nconst searchRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, { searchfield: action.payload });\n    default:\n      return state;\n  }\n};\n\n/* redux reducer responsible for changing the state of the \n app with the info provided by the actions\n\n (PLEASE NOTE THERE WOULD USUALLY BE ONE REDUCER IN AN APP,\n THERE ARE TWO HERE FOR DEMOSTRATION PURPOSES TO SHOW UNDERSTANDING \n OF REDUX) */\nconst requestRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        isPending: false,\n        robots: action.payload,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        isPending: true,\n        error: action.payload,\n      });\n    default:\n      return state;\n  }\n};\n\n/* exporting the reducer functions */\nexport { searchRobots, requestRobots };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport \"./index.css\";\nimport App from \"./containers/App/App.js\";\nimport \"tachyons\";\n\nimport { searchRobots, requestRobots } from \"./containers/Reducers/reducers.js\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <div>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}